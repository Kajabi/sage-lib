<%= content_for :heading do %>
<%= md(%(
# Getting Started
<p class="docs-heading__lead">Sage is informed by customer outcomes and is the tool designers at Kajabi use to craft predictable patterns that are integrated throughout the admin experience. </p>

These reusable patterns are created from flexible building blocks we call components that share consistent visual foundations like color, iconography, typography, spacing, and interactive states.

This design system is not owned by any one person or group but is a collective effort across the UXD and Product Design teams at Kajabi. Each team member can make suggestions for enhancements, as well as propose new components and patterns.
)) %>
<% end %>
<%= md("
## How It Works
The UI of the Kajabi Core application is a combination of Rails Components, React Components and a custom SCSS Framework called Sage that applies a uniform style to both.
", use_sage_type: true) %>
<%= sage_component SageGridRow, {} do %>
  <%= sage_component SageGridCol, { breakpoint: :lg, size: "6" } do %>
    <div class="docs-feature">
      <i class="devicon devicon-sass-original colored"></i>
      <h3 class="t-sage-heading-4">SCSS System</h3>
      <p class="t-sage-body">The language-agnostic style system that allows us to service any app code choice. This is the cornerstone of Sage. This includes a library of Sass variables, functions, and mixins.</p>
      <%= sage_component SageLink, { label: "View Sassdocs site", url: Rails.application.config.sassdocs_root_url, external: true, launch: true } %>
    </div>
  <% end %>
  <%= sage_component SageGridCol, { breakpoint: :lg, size: "6" } do %>
    <div class="docs-feature">
      <i class="devicon devicon-rails-plain-wordmark colored"></i>
      <h3 class="t-sage-heading-4">Rails Components</h3>
      <p class="t-sage-body">Our default approach to solving customer problems is via ROR. We use custom Rails Components to serve our system to the app. These are documented within this site under "Elements" and "Objects."</p>
    </div>
  <% end %>
  <%= sage_component SageGridCol, { breakpoint: :lg, size: "6" } do %>
    <div class="docs-feature">
      <i class="devicon devicon-javascript-plain colored"></i>
      <h3 class="t-sage-heading-4">Vanilla Javascript</h3>
      <p class="t-sage-body">Our Rails components have clean, minimal JavaScript needed to ensure the necessary interactions and accessibility features are available right out of the box.</p>
    </div>
  <% end %>
  <%= sage_component SageGridCol, { breakpoint: :lg, size: "6" } do %>
    <div class="docs-feature">
      <i class="devicon devicon-react-original colored"></i>
      <h3 class="t-sage-heading-4">React Components</h3>
      <p class="t-sage-body">We build React versions of many of our components that mimic the same functionality. A few of our components exist only as React components due to their complexity.</p>
      <%= sage_component SageLink, { label: "View React components", url: Rails.application.config.storybook_root_url, external: true, launch: true } %>
    </div>
  <% end %>
<% end %>
<%= md("
We think of our approach to UI at Kajabi in this way: We default to using Rails Components and a classic Rails approach to most problems and move to React where it counts.

Rails does many things very well and gives us the ability to move quickly and solve complex problems with very simple, tried and true, code solutions. With that said, sometimes we come across a problem that we want to solve that the standard rails approach will just not be enough ( Think complex interactions with many versions of state ). In this case we move to React as our default approach to solving complex, Javascript heavy problems.

", use_sage_type: true) %>
<hr>
<%= sage_component SageGridRow, {} do %>
  <%= sage_component SageGridCol, { breakpoint: :lg, size: "7" } do %>
<%= md("

Because our system contains two different approaches to UI creation, we utilize a SCSS Design System to provide the styles to both types of components (Think Bootstrap, but customized for our products). Our Design System provides the styles for the core components that make up the UI of our product.

[Explore Sage Elements](/pages/elements)

[Explore Sage Objects](/pages/objects)
", use_sage_type: true) %>
  <% end %>
  <%= sage_component SageGridCol, { breakpoint: :lg, size: "5" } do %>
    <%= image_tag("components.svg", style: "display:block;max-width:500px;margin:0 auto;width:100%;height:auto", size: "1000x1036") %>
  <% end %>
<% end %>
<hr>
<%= md("

This system is a work of shared ownership and we encourage any member of the Kajabi team to feel empowered to participate in its ongoing improvement. Understanding and contributing to the system are the keys to the system's longevity. We encourage anyone planning on contributing to the system to first read over our Guides:

[Code Guidelines](https://github.com/Kajabi/sage-lib/wiki).
", use_sage_type: true) %>
