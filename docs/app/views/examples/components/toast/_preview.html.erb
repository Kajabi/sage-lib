<h3>Triggering with <code>Sage.toast.trigger()</code></h3>
<p>
  Toasts do not have a SageRails component template. They are JavaScript-only, templating is defined in <a href="https://github.com/Kajabi/sage-lib/blob/main/packages/sage-system/lib/toast/toast.template.js" target="_blank" rel="noopener"><code>sage-system/lib/toast/toast.template.js</code></a>.
</p>

<%= sage_component SageButtonGroup, { gap: :sm } do %>
  <%= sage_component SageButton, {
    value: "Toast",
    style: "primary",
    attributes: {
      "onClick": "Sage.toast.trigger({text: 'Toast created.'})",
    },
  } %>

  <%= sage_component SageButton, {
    value: "Danger Toast",
    style: "danger",
    attributes: {
      "onClick": "Sage.toast.trigger({text: 'An error has occured.', type: 'danger', icon: 'danger-filled'})",
    },
  } %>

  <%= sage_component SageButton, {
    value: "Custom Icon",
    style: "secondary",
    attributes: {
      "onClick": "Sage.toast.trigger({text: 'Invitation sent!', icon: 'mail'})",
    },
  } %>

  <%= sage_component SageButton, {
    value: "Custom Timer: 10s",
    style: "secondary",
    attributes: {
      "onClick": "Sage.toast.trigger({text: 'This toast has a 10 second timer.', timer: 10000})",
    },
  } %>
<% end %>

<%= sage_component SageCardDivider, {} %>

<h3>Non-dismissing Toast patterns</h3>
<p>Non-dismissable toasts are used in our app to display 'loading' messages or to provide a CTA upon a interaction.</p>

<%= sage_component SageButtonGroup, { gap: :sm } do %>
  <%= sage_component SageButton, {
    value: "Example",
    style: "primary",
    attributes: {
      "onClick": "showDismissInstructions(Sage.toast.trigger({text: 'I will not dismiss via timer', timer: false, testId: 'toast_example'}))",
    },
  } %>

  <%= sage_component SageButton, {
    value: "Uploading",
    style: "secondary",
    attributes: {
      "onClick": "showDismissInstructions(Sage.toast.trigger({text: 'Uploading image...', type: 'loading', timer: false, testId: 'uploading_toast'}))",
    },
  } %>

  <%= sage_component SageButton, {
    value: "Goal Completion (non-dismissing with link)",
    style: "secondary",
    attributes: {
      "onClick": "showDismissInstructions(Sage.toast.trigger({text: 'Congratulations on your success', link: {text: 'Go to next step', href: 'http://app.kajabi.com'}, timer: false}))",
    },
  } %>

  <%= sage_component SageButton, {
    value: "Reset",
    style: "danger",
    attributes: {
      "onClick": "Sage.toast.reset()",
    },
  } %>
<% end %>

<div id="dismiss-instructions"></div>

<%= sage_component SageCardDivider, {} %>

<pre class="prettyprint">
  <code>
    // Sage.toast.trigger()
    // -------------------------------------------------------------
    // Triggers a toast with a toast options object and
    // returns the unique id of the toast.
    //
    // @param {{ message, icon, testId, type, timer, link = {text, href} }} - Toast options
    // @returns {unique id}
    //
    // Example:
    const myWonderfulToastId = Sage.toast.trigger({
        text: 'I will not dismiss via timer',
        timer: false,
        icon: 'check',
        type: 'danger',
        link: { text: 'next step', href 'example.com' },
        testId: 'toast_test_example',
      });


    // Sage.toast.dismiss()
    // -------------------------------------------------------------
    // Dismisses a toast with a unique id.
    //
    // @param {unique id}
    // @returns {boolean} – `false` if no toast of that ID exists,
    //                      `true` if exists and successfully dismissed
    //
    // Example:
    Sage.toast.dismiss(myWonderfulToastId);


    // Sage.toast.reset()
    // -------------------------------------------------------------
    // Removes all toasts from DOM
    //
    // @returns {boolean} – `false` if none exist, `true` if removed
    //
    // Example:
    Sage.toast.reset();
  </code>
</pre>

<%= sage_component SageCardDivider, {} %>

<%= sage_component SagePanelStack, {} do %>
  <h3>Events</h3>

  <%= sage_component SageTable, {
    striped: true,
    responsive: true,
    headers: [
      "Event name",
      "Description"
    ],
    rows: [
      {
        col_1: md("`sage.toast.open`"),
        col_2: md("Sent when a Toast has been opened")
      },
      {
        col_1: md("`sage.toast.close`"),
        col_2: md("Sent when a Toast has been closed")
      },
      {
        col_1: md("`sage.toast.dismiss`"),
        col_2: md("Sent when a Toast has been dismissed by user interaction, such as clicking the close button. The `sage.toast.close` event will follow afterwards.")
      },
    ]
  } %>
<% end %>

<script>
  const showDismissInstructions = (toastId) => {
    document.getElementById('dismiss-instructions').innerHTML = `
      <strong>Toast Id:</strong> <code>${toastId}</code>
      <br/>
      <br/>
      <h4>Dismiss toast with:</h4>
      <br/>
      <div class='prettyprint'>
        <code>Sage.toast.dismiss('${toastId}')</code>
      </div>
      <br/>
      <h4>Dismiss all toasts with:</h4>
      <br/>
      <div class='prettyprint'>
        <code>Sage.toast.reset()</code>
      </div>
    `
  };
  document.addEventListener("sage.toast.open", function(e) {
    console.info("sage.toast.open event", e);
  });
  document.addEventListener("sage.toast.close", function(e) {
    console.info("sage.toast.close event", e);
  });
  document.addEventListener("sage.toast.dismiss", function(e) {
    console.info("sage.toast.dismiss event", e);
  });
</script>
