////
/// Button
///
/// @group sage
////


//
// Base style variables
//
$-btn-transition: map-get($sage-transitions, default);
$-btn-border-radius: sage-border(radius);
$-btn-shadow-base: sage-shadow(sm);
$-btn-base-styles: (
  primary: (
    default: (
      color: sage-color(white),
      background-color: sage-color(primary),
      ring-color: sage-color(primary),
    ),
    hover: (
      color: sage-color(white),
      background-color: sage-color(primary, 400),
    ),
    focus: (
      color: sage-color(white),
      background-color: sage-color(primary),
    ),
    disabled: (
      color: sage-color(primary, 200),
      background-color: sage-color(primary, 100),
    )
  ),
  secondary: (
    default: (
      color: sage-color(charcoal),
      background-color: sage-color(white),
      ring-color: sage-color(charcoal),
    ),
    hover: (
      color: sage-color(charcoal),
      background-color: sage-color(grey, 200),
    ),
    focus: (
      color: sage-color(charcoal),
      background-color: sage-color(white),
    ),
    disabled: (
      color: sage-color(grey, 500),
      background-color: sage-color(grey, 200),
    )
  ),
  danger: (
    default: (
      color: sage-color(white),
      background-color: sage-color(red),
      ring-color: sage-color(red),
    ),
    hover: (
      color: sage-color(white),
      background-color: sage-color(red, 400),
    ),
    focus: (
      color: sage-color(white),
      background-color: sage-color(red),
    ),
    disabled: (
      color: sage-color(red, 200),
      background-color: sage-color(red, 100),
    )
  ),
);

$-btn-subtle-styles: (
  primary: (
    default: sage-color(primary),
    hover: sage-color(primary, 400),
    focus: sage-color(primary),
    disabled: sage-color(primary, 200),
  ),
  secondary: (
    default: sage-color(charcoal, 200),
    hover: sage-color(charcoal, 500),
    focus: sage-color(charcoal, 200),
    disabled: sage-color(grey, 500),
  ),
  danger: (
    default: sage-color(red),
    hover: sage-color(red, 400),
    focus: sage-color(red),
    disabled: sage-color(red, 200),
  ),
);

//
// Custom variables
//
$-btn-interactive-label-icon-size: rem(24px);
$-btn-loading-min-height: rem(36px);


// stylelint-disable max-nesting-depth
:root {
  --icon-block-padding: #{rem(6px)};

  @media screen and (min-width: sage-breakpoint(lg-min)) {
    --icon-block-padding: #{rem(4px)};
  }
}

.sage-btn {
  @extend %t-sage-body-med;
  @include sage-button-style-reset();
  @include sage-focus-outline;

  $-padding-block: rem(6px);

  display: inline-flex;
  align-self: inherit;
  align-items: center;
  padding: $-padding-block sage-spacing(sm);
  text-align: left; // Prevents text alignment issue when inner text is truncated
  border: 0;
  border-radius: $-btn-border-radius;
  transition: $-btn-transition;
  transition-property: border, background-color, box-shadow;

  &:disabled,
  &[aria-disabled="true"] {
    @include sage-button-style-disabled;
  }

  &:focus:not(:disabled):not([aria-disabled="true"]),
  &:active:not(:disabled):not([aria-disabled="true"]) {
    .sage-dropdown__item > & {
      @include sage-focus-outline--update-color(transparent);
    }
  }

  // Contextual modifications
  &.sage-banner__close {
    position: absolute;
  }

  .sage-dropdown--contained .sage-dropdown__trigger &,
  .sage-panel-controls__tabs-dropdown .sage-dropdown__trigger &,
  .sage-panel-controls__toolbar .sage-dropdown__trigger &,
  .sage-panel-controls__bulk-actions .sage-dropdown__trigger & {
    @include sage-focus-outline--update-color(transparent);

    width: inherit;
    border-radius: inherit;

    &:hover {
      background-color: sage-color(white);
    }
  }

  .sage-dropdown__item > & {
    width: 100%;
    padding-top: rem(9px);
    padding-bottom: rem(9px);
    border-radius: 0;
  }

  .sage-dropdown__trigger > & {
    line-height: sage-line-height(body);
  }

  .sage-dropdown__trigger--select & {
    font-weight: sage-font-weight(regular);
  }

  .sage-input-group & {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  .sage-label & {
    display: flex;
    justify-content: center;
    position: absolute;
    right: 0;
    width: $-btn-interactive-label-icon-size;
    margin: auto 0;
    border-radius: 0 sage-border(radius-x-large) sage-border(radius-x-large) 0;

    &::before {
      transform: translateY(1px); /* needed as sage-font-size(sm) equates to 13px, not 14px. This 1px is accounting for that 1px */
      font-size: sage-font-size(sm);
    }

    &::after {
      width: $-btn-interactive-label-icon-size;
      height: $-btn-interactive-label-icon-size;
      border-radius: 0 sage-border(radius-x-large) sage-border(radius-x-large) 0;
    }

    &:first-child:not(:last-child) {
      margin-right: sage-spacing(xs);
    }

    + & {
      margin-left: 0;
    }

    &.sage-btn--tag::before {
      font-size: sage-font-size(md, false);
    }
  }

  .sage-label__value & {
    width: rem(28px);
  }

  .sage-hero__body & {
    margin-top: sage-spacing(md);
  }

  .sage-page-heading__actions & {
    &:not(:last-child) {
      margin-right: sage-spacing();
    }
  }

  .sage-page-heading__toolbar & {
    &:not(:last-child) {
      margin-right: sage-spacing();
    }
  }

  .sage-page-heading__actions & {
    align-self: flex-start;
  }

  .sage-sortable__item-actions & {
    &:not(:last-child) {
      margin-right: sage-spacing(sm);
    }
  }

  .sage-input-group & {
    position: absolute;
    transform: translateY(-50%);
    top: 50%;
    right: calc(#{rem(2px)} / 2);
    height: calc(100% - #{rem(2px)});
    background-color: sage-color(white);
    box-shadow: rem(-1px) 0 0 0 sage-color(grey, 300);

    @include sage-focus-outline--update-color(transparent);

    &::before {
      margin-right: 0;
    }

    &:focus {
      box-shadow: 0 0 0 rem(2px) sage-color(primary);
    }
  }

  .sage-panel-controls__bulk-actions > &,
  .sage-panel-controls__toolbar > &,
  .sage-panel-controls__toolbar-btn-group > &,
  .sage-panel-controls__pagination > & {
    position: relative;
    z-index: sage-z-index(default);
    box-shadow: map-get($sage-toolbar-button-borders, default);
    border: 0;

    @include sage-focus-outline--update-color(transparent);

    &:hover {
      z-index: sage-z-index(default, 1);
      box-shadow: map-get($sage-toolbar-button-borders, hover);
      background-color: sage-color(white);
    }

    &:focus {
      z-index: sage-z-index(default, 2);
      box-shadow: map-get($sage-toolbar-button-borders, focus);
    }
  }

  .sage-panel-controls__toolbar-btn-group > & {
    border-radius: 0;

    &:first-child {
      border-top-left-radius: sage-border(radius);
      border-bottom-left-radius: sage-border(radius);
    }

    &:last-child {
      border-top-right-radius: sage-border(radius);
      border-bottom-right-radius: sage-border(radius);
    }
  }

  .sage-panel-controls__toolbar-btn-group--expand-collapse > & {
    border-radius: sage-border(radius);
  }

  .sage-panel-controls__toolbar > &,
  .sage-panel-controls__pagination > & {
    border-radius: sage-border(radius);

    &:not(:last-child) {
      margin-right: sage-spacing(card);
    }
  }

  // NOTE: Icon generation consolidated in `core/_icons.scss`
}

.sage-btn--is-loading {
  pointer-events: none;

  &[class*="sage-btn--icon"]::before {
    content: "";
  }

  svg {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;
  }

  .sage-btn__truncate-text {
    opacity: 0;
  }
}

// Generate button style variations
@each $-style-name, $-styles in $-btn-base-styles {
  .sage-btn--#{$-style-name} {
    @each $-style-type-name, $-style-type-configs in $-styles {
      @if ($-style-type-name == hover) {
        &:hover {
          color: map-get($-style-type-configs, color);
          background-color: map-get($-style-type-configs, background-color);
        }
      }
      @else if ($-style-type-name == focus) {
        &:focus,
        &:active {
          color: map-get($-style-type-configs, color);
          background-color: map-get($-style-type-configs, background-color);
        }
      }
      @else if ($-style-type-name == disabled) {
        &:disabled,
        &[aria-disabled="true"] {
          color: map-get($-style-type-configs, color);
          background-color: map-get($-style-type-configs, background-color);
          box-shadow: none;
        }
      }
      @else {
        @include sage-focus-outline--update-color(map-get($-style-type-configs, ring-color));

        color: map-get($-style-type-configs, color);
        background-color: map-get($-style-type-configs, background-color);
      }
    }

    &:not(.sage-btn--subtle):not(:disabled):not([aria-disabled="true"]) {
      // Shadow appears on Primary by default but can be toggled off with `--no-shadow`
      @if ($-style-name == primary) {
        box-shadow: $-btn-shadow-base;

        &.sage-btn--no-shadow {
          box-shadow: none;
        }
      }
      // All other buttons have no shadow by default but one can be toggled on with `--raised`
      @else {
        &.sage-btn--raised {
          box-shadow: $-btn-shadow-base;
        }
      }
    }
  }
}

// Subtle buttons are smaller with no padding or background color but still use a focus ring
.sage-btn--subtle {
  padding: 0;
  box-shadow: none;

  @include sage-focus-outline($outline-offset-inline: 6px, $outline-offset-block: 0);

  // Generate button style variations
  @each $-style-name, $-styles in $-btn-subtle-styles {
    &.sage-btn--#{$-style-name} {
      color: map-get($-styles, default);
      background-color: transparent;

      @include sage-focus-outline--update-color(map-get($-styles, default));

      &:hover {
        color: map-get($-styles, hover);
        background-color: transparent;
      }

      &:focus,
      &:active {
        color: map-get($-styles, focus);
        background-color: transparent;
      }

      &:disabled,
      &[aria-disabled="true"] {
        color: map-get($-styles, disabled);
        background-color: transparent;
      }

      &[class*="icon-only"] {
        @include sage-focus-outline($outline-offset-inline: 4px, $outline-offset-block: 0);
        @include sage-focus-outline--update-color(map-get($-styles, default));

        .sage-label & {
          @include sage-focus-outline($outline-offset-inline: -2px, $outline-offset-block: -2px);
          @include sage-focus-outline--update-color(map-get($-styles, default));

          position: absolute; /* this keeps the button inside a label within the visual bounds of the label component */

          &::after {
            border-radius: 0 sage-border(radius-x-large) sage-border(radius-x-large) 0;
          }
        }
      }
    }
  }

  .sage-assistant & {
    color: sage-color(grey, 100);

    @include sage-focus-outline--update-color(sage-color(white));

    &:hover {
      color: sage-color(white);
    }

    &:focus {
      color: sage-color(white);
    }
  }
}

.sage-btn--small {
  @extend %t-sage-body-small-med;
}

// TODO: Investigate deprecating the float setting here
.sage-btn--align-end {
  align-self: flex-end;
  float: right;
}

.sage-btn--full-width {
  align-self: stretch;
  width: 100%;
}

.sage-btn__truncate-text {
  @include truncate;
  pointer-events: none;

  .sage-dropdown__trigger & {
    display: inline-flex;
    align-items: center;
  }
}

// Button groups allow for several buttons together to be spaced appropriately
.sage-btn-group {
  display: flex;
  align-items: center;
  flex-wrap: wrap;

  @media screen and (min-width: sage-breakpoint(sm-min)) {
    flex-wrap: nowrap;
  }
}

@each $-key, $-value in $sage-spacings {
  .sage-btn-group--gap-#{$-key} {
    gap: sage-spacing($-key);
  }
}

.sage-btn-group--wrap {
  @media screen and (min-width: sage-breakpoint(sm-min)) {
    flex-wrap: wrap;
  }
}

.sage-btn-group--align-end {
  justify-content: flex-end;
}

.sage-btn-group--align-space-between {
  justify-content: space-between;
}

.sage-btn-group--border-top {
  padding-top: sage-spacing(lg);
  border-top: 1px solid sage-color(grey, 300);
}
