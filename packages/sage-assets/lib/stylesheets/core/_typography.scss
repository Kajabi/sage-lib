////
/// Typography setup
///
/// @group sage
////


// Font definitions
$-heading-font: "Greet Standard", "Inter", -apple-system, system-ui, "BlinkMacSystemFont", "Segoe UI", "Roboto", "Ubuntu", sans-serif;
$-body-font-stack: "Inter", -apple-system, system-ui, "BlinkMacSystemFont", "Segoe UI", "Roboto", "Ubuntu", sans-serif;
$-body-margin-block-end: sage-spacing(xs);
$-headings-margin-block-end: sage-spacing(sm);

///
/// Sage responsive font sizes and line heights custom props
///
/// Responsive font sizes and line heights use CSS custom properties to apply a raw font size for a given breakpoint range.
/// NOTE: Changes to these configurations should also be synced up in the following places:
///   - `components/_icon.scss`
///   - Sage Rails tokens definition
///   - React Icon configurations
///
:root {
  // Font sizes
  --sage-font-size-body-xs: #{map-get($sage-font-sizes, xs)};
  --sage-font-size-body-sm: #{map-get($sage-font-sizes, sm)};
  --sage-font-size-body: #{map-get($sage-font-sizes, md)};
  --sage-font-size-h6: #{map-get($sage-font-sizes, lg)};
  --sage-font-size-h5: #{map-get($sage-font-sizes, xl)};
  --sage-font-size-h4: #{map-get($sage-font-sizes, 2xl)};
  --sage-font-size-h3: #{map-get($sage-font-sizes, 3xl)};
  --sage-font-size-h2: #{map-get($sage-font-sizes, 4xl)};
  --sage-font-size-h1: #{map-get($sage-font-sizes, 5xl)};

  // Line heights
  --sage-line-height-body-xs: #{map-get($sage-line-heights, xs)};
  --sage-line-height-body-sm: #{map-get($sage-line-heights, sm)};
  --sage-line-height-body: #{map-get($sage-line-heights, md)};
  --sage-line-height-h6: #{map-get($sage-line-heights, lg)};
  --sage-line-height-h5: #{map-get($sage-line-heights, xl)};
  --sage-line-height-h4: #{map-get($sage-line-heights, 2xl)};
  --sage-line-height-h3: #{map-get($sage-line-heights, 3xl)};
  --sage-line-height-h2: #{map-get($sage-line-heights, 4xl)};
  --sage-line-height-h1: #{map-get($sage-line-heights, 5xl)};

  // Font family
  --sage-font-family: #{$-body-font-stack};
  --sage-font-family-heading: #{$-heading-font};
}

// Responsive adjustments are currently TBD
// @media screen and (min-width: sage-breakpoint(lg-min)) {
//   :root {
//     // Font sizes
//     // --sage-font-size-body-xs: same
//     // --sage-font-size-body-sm: same
//     // --sage-font-size-body: same
//     // --sage-font-size-h6: same
//     // --sage-font-size-h5: same
//     // --sage-font-size-h4: same
//     // --sage-font-size-h3: same
//     // --sage-font-size-h2: same
//     // --sage-font-size-h1: same
//
//     // Line heights
//     // --sage-line-height-body-xs: same
//     // --sage-line-height-body-sm: same
//     // --sage-line-height-body: same
//     // --sage-line-height-h6: same
//     // --sage-line-height-h5: same
//     // --sage-line-height-h4: same
//     // --sage-line-height-h3: same
//     // --sage-line-height-h2: same
//     // --sage-line-height-h1: same
//   }
// }

body:not(.sage-excluded) {
  @include sage-font-family();
}

.sage-scoped {
  @include sage-font-family();

  * {
    @include sage-font-family();
  }
}

body:not(.sage-excluded),
.sage-scoped {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-size-adjust: 100%;
  color: map-get($sage-text-colors, body);
  font-size: sage-font-size();
}

// Automate setting up classes that extend the specs
@each $spec-name, $spec in $sage-type-specs {
  .t-sage-#{$spec-name} {
    @extend %t-sage-#{$spec-name};
    color: inherit;
  }
}


// For simpler markup styling in blocks of CMS-like text, use this container
.sage-type {

  // Body-like elements get spacing below
  > ul:not([class]),
  > ol:not([class]),
  > dl:not([class]),
  > [class*="t-sage-body"] {
    @include sage-block-spacing($-body-margin-block-end);
  }

  // Heading-like elements get spacing below as well
  > h1:not([class]),
  > h2:not([class]),
  > h3:not([class]),
  > h4:not([class]),
  > h5:not([class]),
  > h6:not([class]),
  > [class*="t-sage-heading-"] {
    color: map-get($sage-text-colors, heading);

    @include sage-block-spacing($-headings-margin-block-end);
  }

  // Elements with no classes extend related type specs
  > h1:not([class]) {
    @extend %t-sage-heading-1;
  }

  > h2:not([class]) {
    @extend %t-sage-heading-2;

    &:not(:first-child) {
      margin-block-start: sage-spacing(lg);
    }
  }

  > .t-sage-heading-2:not(:first-child) {
    margin-block-start: sage-spacing(lg);
  }

  > h3:not([class]) {
    @extend %t-sage-heading-3;

    &:not(:first-child) {
      margin-block-start: sage-spacing();
    }
  }

  > h4:not([class]) {
    @extend %t-sage-heading-4;

    &:not(:first-child) {
      margin-block-start: sage-spacing();
    }
  }

  > h5:not([class]) {
    @extend %t-sage-heading-5;

    &:not(:first-child) {
      margin-block-start: sage-spacing();
    }
  }

  > h6:not([class]) {
    @extend %t-sage-heading-6;

    &:not(:first-child) {
      margin-block-start: sage-spacing();
    }
  }

  > .t-sage-heading-3,
  > .t-sage-heading-4,
  > .t-sage-heading-5,
  > .t-sage-heading-6 {
    &:not(:first-child) {
      margin-block-start: sage-spacing();
    }
  }

  > ul li:not([class]),
  > ol li:not([class]),
  > p:not([class]) {
    @extend %t-sage-body;
  }

  // Hyperlinks get some default coloring applied
  > a:not([class]),
  > a[class*="sage-link"] {
    color: sage-color(primary, 300);

    &:hover {
      color: sage-color(primary, 400);
    }
  }

  > table:not(:last-child) {
    margin-block-start: sage-spacing();
    margin-block-end: sage-spacing();
  }
}

// Generate text color modifiers
@each $color-name, $color-slider in $sage-colors {
  $color-value: "";

  @if ($color-name == blue) {
    $color-value: sage-color($color-name, 600);
  }
  @else if ($color-name == green) {
    $color-value: sage-color($color-name, 600);
  }
  @else if ($color-name == mercury) {
    $color-value: sage-color($color-name, 500);
  }
  @else if ($color-name == grey) {
    $color-value: sage-color($color-name, 500);
  }
  @else {
    // Default color values
    $color-value: sage-color($color-name);
  }
  .t-sage--color-#{"" + $color-name} {

    color: $color-value;
  }

  // Specific color values
  @each $-level, $-value in $color-slider {


    $classname: ".t-sage--color-#{"" + $color-name}-#{$-level}";
    @if ($-level == 50) {
      $classname: ".t-sage--color-#{"" + $color-name}-0#{$-level}";
    }

    #{$classname} {
      color: sage-color($color-name, $-level);
    }
  }
}

.t-sage--align-center {
  text-align: center;
}

.t-sage--align-right {
  text-align: end;
}

.t-sage--align-justify {
  text-align: justify;
}

.t-sage--strikethrough {
  text-decoration: line-through;
}

.t-sage--truncate {
  @include truncate;
}

.t-sage--truncate-min-width {
  min-width: 0;
}

.t-sage--line-clamp {
  @include line-clamp(1);
}

@for $i from 2 through 4 {
  .t-sage--line-clamp-#{$i} {
    -webkit-line-clamp: #{$i};
  }
}

.t-sage--underline-dotted {
  text-decoration-color: sage-color(grey, 600);
  text-decoration-line: underline;
  text-decoration-style: dotted;
  text-decoration-thickness: 12%;
  text-underline-offset: 0.3rem;
  text-underline-position: under;
}

// Language-specific font-family rules for internationalization
html[lang="he"],
[lang="he"] {
  --sage-font-family: "Noto Sans Hebrew", "Arial Hebrew", "Rubik", "Frank Ruehl", "tahoma", system-ui, sans-serif;
  --sage-font-family-heading: "Noto Sans Hebrew", "Arial Hebrew", "Rubik", "Frank Ruehl", "tahoma", system-ui, sans-serif;
}

html[lang="ar"],
[lang="ar"] {
  --sage-font-family: "Noto Sans Arabic", "Cairo", "Amiri", "tahoma", "arial", system-ui, sans-serif;
  --sage-font-family-heading: "Noto Sans Arabic", "Cairo", "Amiri", "tahoma", "arial", system-ui, sans-serif;
}

html[lang="hi"],
[lang="hi"] {
  --sage-font-family: "Noto Sans Devanagari", "Mangal", "Kokila", "Lohit Devanagari", "Sahadeva", "tahoma", system-ui, sans-serif;
  --sage-font-family-heading: "Noto Sans Devanagari", "Mangal", "Kokila", "Lohit Devanagari", "Sahadeva", "tahoma", system-ui, sans-serif;
}
