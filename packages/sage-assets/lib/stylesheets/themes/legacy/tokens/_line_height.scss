////
/// Sage line height/leading
///
/// @group sage
////


///
/// Sage raw line height/leading token (non-responsive)
/// See core/_typography.scss for where these are primarily implemented.
///
$sage-line-heights: (
  xs: sage-baseline(5), // 20
  sm: sage-baseline(6), // 24
  md: sage-baseline(7), // 28
  lg: sage-baseline(8), // 32
  xl: sage-baseline(9), // 36
);

///
/// Sage line height token utility
///
/// @param {string} $key [body] The token to retrieve.
///    By default, this should be a type spec token.
///    If the next parameter is `false` then this should be a line height token.
/// @param {bool} $responsive [true] Whether or not retrieve a responsive css custom property (based on type specs) or a flat value (based on line-height tokens).
///
/// @example scss - Responsive setting
///   .sage-box {
///     line-height: sage-line-height(body-sm);
///   }
///
///   // Output
///   .sage-box {
///     line-height: var(--sage-line-height-body-sm);
///   }
///
/// @example scss - Flat setting
///   .sage-box {
///     @include sage-line-height(md, false);
///   }
///
///   // Output
///   .sage-box {
///     line-height: 1.75rem;
///   }
///
/// @return {length} The value retrieved
///
@function sage-line-height($key: body, $responsive: true) {
  @if ($responsive) {
    @return var(--sage-line-height-#{$key});
  }

  @else {
    @return map-get($sage-line-heights, $key);
  }
}
