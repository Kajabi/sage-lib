////
/// Frame
///
/// @group sage
////

//
// 1. Options maps
//

// Flex alignments for `justify-contents` and `align-items`
// named to resemble the auto layout settings in Figma
$-sage-frame-alignments: (
  top-left: (
    h: flex-start,
    v: flex-start,
  ),
  top-center: (
    h: center,
    v: flex-start,
  ),
  top-right: (
    h: flex-end,
    v: flex-start,
  ),
  center-left: (
    h: flex-start,
    v: center,
  ),
  center: (
    h: center,
    v: center,
  ),
  center-right: (
    h: flex-end,
    v: center,
  ),
  bottom-left: (
    h: flex-start,
    v: flex-end,
  ),
  bottom-center: (
    h: center,
    v: flex-end,
  ),
  bottom-right: (
    h: flex-end,
    v: flex-end,
  ),
  baseline-left: (
    h: flex-start,
    v: baseline,
  ),
  baseline-center: (
    h: center,
    v: baseline,
  ),
  baseline-right: (
    h: flex-end,
    v: baseline,
  ),
  start-spread: (
    h: space-between,
    v: flex-start,
  ),
  center-spread: (
    h: space-between,
    v: center,
  ),
  end-spread: (
    h: space-between,
    v: flex-end,
  ),
  stretch-left: (
    h: flex-start,
    v: stretch,
  ),
  stretch-right: (
    h: flex-end,
    v: stretch,
  ),
  stretch-center: (
    h: center,
    v: stretch,
  ),
  stretch-spread: (
    h: space-between,
    v: stretch,
  ),
  spread-stretch: (
    h: space-between,
    v: stretch,
  ),
);

// Border radii options
// Generally aligned to border tokens plus a `none` option
$-sage-frame-border-radii: (
  none: 0,
  sm: sage-border(radius-small),
  md: sage-border(radius),
  lg: sage-border(radius-large),
);

// Border treatment options
// Generally aligned to border tokens plus a `none` option
$-sage-frame-borders: (
  none: 0,
  default: sage-border(),
);

// Directions that map to `flex-direction`
// named to resemble the auto layout settings in Figma
$-sage-frame-directions: (
  horizontal: row,
  vertical: column,
);

// Spacing options for `padding` and `gap`
// Mapped to the Sage spacing tokens plus a `none` option
$-sage-frame-spacings: map-merge($sage-spacings, (
  none: 0
));

// Width presets to map to `width` (custom settings are also allowed)
// named to resemble the auto layout settings in Figma.
// Used for width, min-width, and max-width settings.
$-sage-frame-widths: (
  fill: 100%,
  flex: auto, // will also add `flex: 1` when applied
  hug: max-content,
  custom: auto,
  initial: initial,
);

// Width presets to map to `width` (custom settings are also allowed)
// named to resemble the auto layout settings in Figma
$-sage-frame-wraps: (
  wrap: wrap,
  none: nowrap,
);


//
// 2. Variables for default settings
//
$-sage-frame-alignment: top-left;
$-sage-frame-background: transparent;
$-sage-frame-border: none;
$-sage-frame-border-radius: none;
$-sage-frame-direction: vertical;
$-sage-frame-gap: md;
$-sage-frame-padding: none;
$-sage-frame-width: fill;
$-sage-frame-min-width: initial;
$-sage-frame-max-width: initial;
$-sage-frame-wrap: none;


//
// 3. Set up element and data attributes for implementing Frame
//

// Root element
.sage-frame {
  display: flex;

  // Add default settings
  &:not([class*="sage-frame--align-"]) {
    align-items: map-get(map-get($-sage-frame-alignments, $-sage-frame-alignment), v);
    justify-content: map-get(map-get($-sage-frame-alignments, $-sage-frame-alignment), h);
  }

  &:not([class*="sage-frame--direction-"]) {
    flex-direction: map-get($-sage-frame-directions, $-sage-frame-direction);
  }

  &:not([class*="sage-frame--gap-"]) {
    gap: map-get($-sage-frame-spacings, $-sage-frame-gap);
  }

  &:not([class*="sage-frame--width-"]) {
    width: map-get($-sage-frame-widths, $-sage-frame-width);
  }
}

//
// 4. A la carte configurations
//

@each $-key, $-val in $-sage-frame-alignments {
  .sage-frame--align-#{$-key} {
    // NOTE: The mappings are inverted by default because "vertical" orientation is default
    // and this makes for "top/bottom" apply to the horizontal axis and vice versa for "left/right"
    justify-content: #{map-get($-val, v)};
    align-items: #{map-get($-val, h)};

    &.sage-frame--direction-horizontal {
      justify-content: #{map-get($-val, h)};
      align-items: #{map-get($-val, v)};
    }
  }
}

.sage-frame--background-custom {
  background: var(--sage-frame-background, transparent);
}

@each $-color, $-sliders in $sage-colors {
  @each $-number, $-configs in $-sliders {
    .sage-frame--background-#{"" + $-color}-#{$-number} {
      background: #{sage-color($-color, $-number)};
    }
  }
}

@each $-key, $-val in $-sage-frame-borders {
  .sage-frame--border-#{$-key} {
    border: #{$-val};
  }
}

@each $-key, $-val in $-sage-frame-border-radii {
  .sage-frame--border-radius-#{$-key} {
    border-radius: #{$-val};
  }
}

@each $-key, $-val in $-sage-frame-directions {
  .sage-frame--direction-#{$-key} {
    flex-direction: #{$-val};
  }
}

@each $-key, $-val in $-sage-frame-wraps {
  .sage-frame--wrap-#{$-key} {
    flex-wrap: #{$-val};
  }
}

@each $-key, $-val in $-sage-frame-spacings {
  .sage-frame--gap-#{$-key} {
    gap: #{$-val};
  }
  
  .sage-frame--padding-#{$-key} {
    padding: #{$_val};
  }
}

@each $-key, $-val in $-sage-frame-widths {
  .sage-frame--width-#{$-key} {
    @if ($-key == "custom") {
      width: var(--sage-frame-width, auto);
    }
    @else {
      @if ($-key == "flex") {
        flex: 1;
      }

      width: #{$-val};
    }
  }
}

@each $-key, $-val in $-sage-frame-widths {
  .sage-frame--max-width-#{$-key} {
    @if ($-key != "custom") {
      max-width: #{$-val};
    }
    @else {
      max-width: var(--sage-frame-max-width, auto);
    }
  }
}

@each $-key, $-val in $-sage-frame-widths {
  .sage-frame--min-width-#{$-key} {
    @if ($-key != "custom") {
      min-width: #{$-val};
    }
    @else {
      min-width: var(--sage-frame-min-width, auto);
    }
  }
}
