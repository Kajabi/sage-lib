////
/// Sage color palette
///
/// @group sage
////


///
/// Sage color palette token
///
/// * requires decimal values for accurate hex conversion
///
$sage-colors: (
  primary: (
    100: hsl(205, 92.3%, 95%), // *
    200: hsl(207, 93%, 77%),
    300: hsl(211.4, 100%, 46.9%), // *
    400: hsl(215, 95%, 37%),
    500: hsl(219, 86%, 20%),
  ),
  sage: (
    100: hsl(161, 68%, 92%),
    200: hsl(161, 48%, 68%),
    300: hsl(165, 58%, 33%),
    400: hsl(170, 46%, 25%),
    500: hsl(175, 44%, 17%),
  ),
  yellow: (
    100: hsl(48, 77%, 89%),
    200: hsl(47, 94%, 80%),
    300: hsl(46, 87%, 54%),
    400: hsl(28.7, 50%, 36.8%), // *
    500: hsl(25, 51%, 24%),
  ),
  red: (
    100: hsl(360, 100%, 94%),
    200: hsl(4, 96%, 83%),
    300: hsl(3.8, 62%, 50.4%), // *
    400: hsl(2, 67%, 36%),
    500: hsl(0, 76%, 21%),
  ),
  orange: (
    100: hsl(29, 74%, 94%),
    200: hsl(27.8, 87%, 75.6%), // *
    300: hsl(28, 93%, 59%),
    400: hsl(17, 72%, 37%),
    500: hsl(20, 76%, 20%),
  ),
  purple: (
    100: hsl(272, 52%, 93%),
    200: hsl(270, 59%, 85%),
    300: hsl(265, 62%, 60%),
    400: hsl(259.5, 45%, 37.3%), // *
    500: hsl(265, 54%, 24%),
  ),
  grey: (
    100: hsl(206, 30%, 98%),
    200: hsl(207, 40%, 97%),
    300: hsl(212, 37%, 91%),
    400: hsl(208, 27%, 79%),
    500: hsl(209, 20%, 65%),
  ),
  charcoal: (
    100: hsl(213, 18%, 39%),
    200: hsl(210, 22%, 32%),
    300: hsl(210, 25%, 25%),
    400: hsl(212, 25%, 20%),
    500: hsl(213, 26%, 15%),
  ),
  white: (
    100: hsl(0, 0%, 100%),
    200: hsl(0, 0%, 100%),
    300: hsl(0, 0%, 100%),
    400: hsl(0, 0%, 100%),
    500: hsl(0, 0%, 100%),
  ),
  black: (
    100: hsl(0, 0%, 100%),
    200: hsl(0, 0%, 100%),
    300: hsl(0, 0%, 100%),
    400: hsl(0, 0%, 100%),
    500: hsl(0, 0%, 100%),
  ),
);

///
/// Sage color token utility
///
/// @param {string} $base the color token to retrieve
/// @param {number} $value [300] the tint or shade to retrieve
///
/// @return {color} the value retrieved
///
@function sage-color($base, $value: 300) {
  $color: map-get(map-get($sage-colors, $base), $value);
  @return $color;
}

///
/// Sage Hex to HSL color conversion utility
///
/// @param {color} $hex the hexadecimal color value
/// @return {string} the hue, saturation, and lightness values
///
@function hex-to-hsl($hex) {
  @return hue($hex), saturation($hex), lightness($hex);
}

///
/// Outputs color values as CSS properties.
///
/// @param {string} $token Name of the color map
/// @param {Number} $opacity Opacity (alpha) value
///
@mixin sage-color-names($token, $opacity: 1) {
  @each $color, $color-values in $token {
    @each $tint, $value in $color-values {
      --sage-color-#{"" + $color}-#{$tint}: hsla(#{hex-to-hsl($value)}, 1);
    }
  }
}

:root {
  @include sage-color-names($sage-colors, 1);
}
