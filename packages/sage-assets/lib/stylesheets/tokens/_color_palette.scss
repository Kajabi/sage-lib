////
/// Sage color palette
///
/// @group sage
////


// When colors are updated here, update in sage_tokens.rb as well.

///
/// Sage color palette token from Style Dictionary.
/// See `style-dictionary/tokens/color/base.json`.
///
$sage-colors: $sd-sage-color;

///
/// Sage default color
///
$sage-color-default: $sd-sage-color-base-grey-500-hex;

///
/// Sage default color name for debug output.
///
$sage-color-default-name: "grey 500";


///
/// Sage breakpoints token utility
///
/// @param {string} $base the color token to retrieve
/// @param {number} $value [300] the tint or shade to retrieve
///
/// @return {color} the value retrieved
///
@function sage-color($base, $value: null) {
  // Map base colors to their default values
  $default-values: (
    black: 500,
    blue: 600,
    charcoal: 300,
    grey: 300,
    green: 600,
    mercury: 500,
    orange: 300,
    primary: 300,
    purple: 600,
    red: 500,
    sage: 300,
    white: 500,
    yellow: 400
  );

  // Get the default value for the given base color
  $default-value: map-get($default-values, $base);

  // If no value is provided, use the default value
  $value: if($value == null, $default-value, $value);

  $color: sd-sage-color($base, $value, hex);

  @if $color {
    @return $color;
  }

  @warn "Could not retrieve color: #{$base} #{$value}. Got `#{$color}` from `sd-sage-color()`. Default color #{$sage-color-default-name} (`#{$sage-color-default}`) returned instead.";

  @return $sage-color-default;

}
